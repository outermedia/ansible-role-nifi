---
- name: Check if NiFi binary exists
  ansible.builtin.stat:
    path: "{{ nifi_binaries_tmp_dir }}/nifi-{{ nifi_version }}-bin.{{ download_format }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: tar_file

- name: Get NiFi binary checksum
  ansible.builtin.uri:
    url: "{{ download_checksum_uri }}/nifi/{{ nifi_version }}/nifi-{{ nifi_version }}-bin.{{ download_format }}.sha512"
    return_content: true
  register: sha512_sum
  when: not tar_file.stat.exists

- name: Download NiFi binary
  ansible.builtin.get_url:
    url: "{{ download_mirror_uri }}/nifi/{{ nifi_version }}/nifi-{{ nifi_version }}-bin.{{ download_format }}"
    dest: "{{ nifi_binaries_tmp_dir }}/nifi-{{ nifi_version }}-bin.{{ download_format }}"
    checksum: sha512:{{ sha512_sum.content }}
  when: not tar_file.stat.exists

- name: Unpack NiFi binary
  ansible.builtin.unarchive:
    remote_src: "yes"
    src: "{{ nifi_binaries_tmp_dir }}/nifi-{{ nifi_version }}-bin.{{ download_format }}"
    dest: "{{ nifi_config_dirs.install }}/"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    creates: "{{ nifi_config_dirs.install }}/nifi-{{ nifi_version }}"

- name: Fix permissions
  ansible.builtin.file:
    path: "{{ nifi_config_dirs.install }}/nifi-{{ nifi_version }}"
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    recurse: "yes"

- name: Create NiFi symlink
  ansible.builtin.file:
    src: nifi-{{ nifi_version }}
    path: "{{ nifi_config_dirs.home }}"
    state: link
    owner: "{{ nifi_user }}"
    group: "{{ nifi_group }}"
    follow: false
    force: true
